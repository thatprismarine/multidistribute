{
  "version": "0.1.0",
  "name": "multidistribute",
  "instructions": [
    {
      "name": "initCollection",
      "docs": [
        "Initializes a new collection for gathering tokens from users.",
        "",
        "A collection allows users to deposit tokens and receive proportional rewards",
        "from multiple distributions. The collection tracks the total tokens deposited",
        "and enforces a maximum cap.",
        "",
        "# Arguments",
        "* `counter` - Unique counter value to allow multiple collections for the same mint",
        "* `max_collectable_tokens` - Maximum number of tokens that can be deposited into this collection"
      ],
      "accounts": [
        {
          "name": "collection",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The collection PDA that is created to hold configuration and state"
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "collection"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "authority"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Mint",
                "path": "mint"
              },
              {
                "kind": "arg",
                "type": "u64",
                "path": "counter"
              }
            ]
          }
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The SPL token mint for tokens being collected"
          ]
        },
        {
          "name": "vault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Associated token account owned by the collection PDA that holds deposited tokens"
          ]
        },
        {
          "name": "replacementMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The replacement mint owned by the collection"
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "replacement_mint"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Collection",
                "path": "collection"
              }
            ]
          }
        },
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The authority who can manage this collection and pays for these accounts"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "counter",
          "type": "u64"
        },
        {
          "name": "maxCollectableTokens",
          "type": "u64"
        },
        {
          "name": "burnTokens",
          "type": "bool"
        }
      ]
    },
    {
      "name": "decreaseCollectionMaxCollectableTokens",
      "docs": [
        "Decreases the maximum number of tokens that can be collected by this collection.",
        "",
        "This can be useful if the collection won't reach its initial maximum, allowing",
        "distributions to be fully utilized. Can only be called by the collection authority.",
        "",
        "# Arguments",
        "* `new_max_collectable_tokens` - New maximum value, must be less than current maximum",
        "and greater than or equal to currently collected amount"
      ],
      "accounts": [
        {
          "name": "collection",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The collection whose max tokens will be decreased"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The authority of the collection"
          ]
        }
      ],
      "args": [
        {
          "name": "newMaxCollectableTokens",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdrawFromCollection",
      "docs": [
        "Withdraws all tokens from the collection vault to the authority's token account.",
        "",
        "Can only be called by the collection authority. This does not affect users'",
        "deposited amounts or their ability to receive from distributions."
      ],
      "accounts": [
        {
          "name": "collection",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The collection to withdraw from"
          ],
          "relations": [
            "authority"
          ]
        },
        {
          "name": "vault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The collection's vault, holding the tokens to withdraw"
          ]
        },
        {
          "name": "authorityTokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The token account to receive the withdrawn tokens"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The authority of the collection"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "initDistribution",
      "docs": [
        "Initializes a new distribution associated with a collection.",
        "",
        "A distribution allows proportional sharing of tokens to collection depositors.",
        "The distributed token type can be different from the collected token type.",
        "Can only be called by the collection authority."
      ],
      "accounts": [
        {
          "name": "distribution",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The created distribution PDA that manages token distribution"
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "distribution"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Collection",
                "path": "collection"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Mint",
                "path": "mint"
              }
            ]
          }
        },
        {
          "name": "collection",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The collection this distribution is associated with"
          ],
          "relations": [
            "authority"
          ]
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The SPL token mint for tokens being distributed. Can be the same as or",
            "different from the collection's mint."
          ]
        },
        {
          "name": "vault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Associated token account owned by the distribution PDA that holds tokens to distribute"
          ]
        },
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The collection's authority and payer for the distribution accounts"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "addDistributionTokens",
      "docs": [
        "Adds tokens to a distribution's vault for later distribution to users.",
        "",
        "Anyone can add tokens to a distribution. This allows for flexible token",
        "sourcing - the tokens don't have to come from the collection authority.",
        "",
        "# Arguments",
        "* `amount` - Number of tokens to add to the distribution"
      ],
      "accounts": [
        {
          "name": "distribution",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The distribution to add tokens to"
          ]
        },
        {
          "name": "vault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The distribution's vault to receive the tokens"
          ]
        },
        {
          "name": "authorityTokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The token account providing the tokens to distribute"
          ]
        },
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The signer who owns the token account providing the tokens"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "userCommitToCollection",
      "docs": [
        "Commits tokens to a collection's vault.",
        "",
        "Users commit tokens to become eligible for distributions. Their share of",
        "future distributions will be proportional to their committed amount relative",
        "to the collection's max_collectable_tokens.",
        "",
        "# Arguments",
        "* `amount` - Number of tokens to commit to the collection"
      ],
      "accounts": [
        {
          "name": "collection",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The collection to commit tokens to"
          ]
        },
        {
          "name": "userState",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "PDA tracking this user's deposits to this collection"
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "user_state"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Collection",
                "path": "collection"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "mint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The SPL token mint for tokens being collected"
          ]
        },
        {
          "name": "userTokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The token account providing the tokens to deposit"
          ]
        },
        {
          "name": "vault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The collection's vault to receive the deposited tokens (if not burning)"
          ]
        },
        {
          "name": "replacementMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The replacement mint owned by the collection"
          ]
        },
        {
          "name": "userReplacementTokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The user's token account to receive replacement tokens"
          ]
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The user depositing tokens, potentially paying for the user_state account"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "userClaimFromDistribution",
      "docs": [
        "Claims a user's share of tokens from a distribution.",
        "",
        "The amount claimed is proportional to the user's deposit in the collection",
        "relative to the collection's max_collectable_tokens. Can be called multiple",
        "times as more tokens are added to the distribution."
      ],
      "accounts": [
        {
          "name": "collection",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The collection associated with this distribution"
          ]
        },
        {
          "name": "distribution",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The distribution to claim tokens from"
          ],
          "relations": [
            "collection"
          ]
        },
        {
          "name": "collectionUserState",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The user's state for the collection, tracking their deposits"
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "user_state"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Collection",
                "path": "collection"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "distributionUserState",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "PDA tracking how many tokens this user has claimed from this distribution"
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "distribution_user_state"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Distribution",
                "path": "distribution"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "distributionVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The vault holding the tokens to be distributed"
          ]
        },
        {
          "name": "userTokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The user's associated token account to receive the claimed tokens"
          ]
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The user claiming tokens from the distribution"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    }
  ],
  "accounts": [
    {
      "name": "Collection",
      "docs": [
        "Tracks configuration and state for token collection.",
        "Holds deposited tokens and manages distribution eligibility."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "type": "publicKey"
          },
          {
            "name": "lifetimeTokensCollected",
            "docs": [
              "sum of tokens ever collected (including previously withdrawn!)"
            ],
            "type": "u64"
          },
          {
            "name": "maxCollectableTokens",
            "docs": [
              "maximum amount of tokens depositable, used for reward share computation"
            ],
            "type": "u64"
          },
          {
            "name": "mint",
            "type": "publicKey"
          },
          {
            "name": "vault",
            "type": "publicKey"
          },
          {
            "name": "replacementMint",
            "type": "publicKey"
          },
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "counter",
            "type": "u64"
          },
          {
            "name": "burnTokens",
            "docs": [
              "whether to burn input tokens instead of collecting them"
            ],
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "CollectionUserState",
      "docs": [
        "Tracks an individual user's deposits into a collection.",
        "Used to calculate their share of distributions."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "depositedAmount",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "Distribution",
      "docs": [
        "Manages token distribution to collection participants.",
        "Tracks deposited tokens and handles proportional distribution based on user deposits."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "collection",
            "type": "publicKey"
          },
          {
            "name": "lifetimeDepositedTokens",
            "docs": [
              "total tokens ever deposited into this distribution"
            ],
            "type": "u64"
          },
          {
            "name": "mint",
            "type": "publicKey"
          },
          {
            "name": "vault",
            "type": "publicKey"
          },
          {
            "name": "distributedTokens",
            "docs": [
              "amount of tokens handed out to users"
            ],
            "type": "u64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "DistributionUserState",
      "docs": [
        "Tracks how many tokens a user has received from a specific distribution.",
        "Prevents double-claiming and enables partial claims as more tokens are added."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "receivedAmount",
            "type": "u64"
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "Overflow",
      "msg": "Arithmetic overflow in calculation"
    },
    {
      "code": 6001,
      "name": "MaxCollectableTokensExceeded",
      "msg": "Tokens for the collection exceed configured maximum"
    },
    {
      "code": 6002,
      "name": "MaxCollectableTokensBelowTotal",
      "msg": "New maximum tokens must be greater than or equal to total tokens"
    },
    {
      "code": 6003,
      "name": "InvalidMaxCollectableTokens",
      "msg": "Maximum collectable tokens must be greater than zero"
    },
    {
      "code": 6004,
      "name": "InvalidDecrease",
      "msg": "New maximum tokens must be less than current maximum"
    }
  ],
  "metadata": {
    "address": "3pXyP2BALvdpq8w9aoCXEhtxqG56JT8MEqeKRgqANnMt"
  }
}
